// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { TypedMap, Entity, Value, ValueKind, store, Bytes, BigInt, BigDecimal } from "@graphprotocol/graph-ts";

export class MembershipTier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MembershipTier entity without an ID");
    if (id) {
      assert(id.kind == ValueKind.STRING, `Entities of type MembershipTier must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
      store.set("MembershipTier", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MembershipTier | null {
    return changetype<MembershipTier | null>(store.get_in_block("MembershipTier", id));
  }

  static load(id: string): MembershipTier | null {
    return changetype<MembershipTier | null>(store.get("MembershipTier", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get lowerAmountThreshold(): BigDecimal {
    let value = this.get("lowerAmountThreshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set lowerAmountThreshold(value: BigDecimal) {
    this.set("lowerAmountThreshold", Value.fromBigDecimal(value));
  }

  get upperAmountThreshold(): BigDecimal {
    let value = this.get("upperAmountThreshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set upperAmountThreshold(value: BigDecimal) {
    this.set("upperAmountThreshold", Value.fromBigDecimal(value));
  }

  get interestRate(): BigDecimal {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestRate(value: BigDecimal) {
    this.set("interestRate", Value.fromBigDecimal(value));
  }

  get totalDeposits(): BigDecimal {
    let value = this.get("totalDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalDeposits(value: BigDecimal) {
    this.set("totalDeposits", Value.fromBigDecimal(value));
  }

  get collectableReferralLevels(): Array<string> {
    let value = this.get("collectableReferralLevels");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set collectableReferralLevels(value: Array<string>) {
    this.set("collectableReferralLevels", Value.fromStringArray(value));
  }

  get profiles(): Array<string> {
    let value = this.get("profiles");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set profiles(value: Array<string>) {
    this.set("profiles", Value.fromStringArray(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(id.kind == ValueKind.STRING, `Entities of type Deposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
      store.set("Deposit", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get_in_block("Deposit", id));
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get principal(): BigDecimal {
    let value = this.get("principal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set principal(value: BigDecimal) {
    this.set("principal", Value.fromBigDecimal(value));
  }

  get depositor(): string {
    let value = this.get("depositor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set depositor(value: string) {
    this.set("depositor", Value.fromString(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get maturity(): BigInt {
    let value = this.get("maturity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maturity(value: BigInt) {
    this.set("maturity", Value.fromBigInt(value));
  }

  get duration(): string {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set duration(value: string) {
    this.set("duration", Value.fromString(value));
  }

  get annualizedInterestReceivable(): BigDecimal {
    let value = this.get("annualizedInterestReceivable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set annualizedInterestReceivable(value: BigDecimal) {
    this.set("annualizedInterestReceivable", Value.fromBigDecimal(value));
  }

  get interestReceivable(): BigDecimal {
    let value = this.get("interestReceivable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestReceivable(value: BigDecimal) {
    this.set("interestReceivable", Value.fromBigDecimal(value));
  }

  get interestCollected(): BigDecimal {
    let value = this.get("interestCollected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestCollected(value: BigDecimal) {
    this.set("interestCollected", Value.fromBigDecimal(value));
  }

  get lastClaimedAt(): BigInt {
    let value = this.get("lastClaimedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastClaimedAt(value: BigInt) {
    this.set("lastClaimedAt", Value.fromBigInt(value));
  }

  get isWithdrawn(): boolean {
    let value = this.get("isWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isWithdrawn(value: boolean) {
    this.set("isWithdrawn", Value.fromBoolean(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(id.kind == ValueKind.STRING, `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profiles(): Array<string> {
    let value = this.get("profiles");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set profiles(value: Array<string>) {
    this.set("profiles", Value.fromStringArray(value));
  }
}

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(id.kind == ValueKind.STRING, `Entities of type Profile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
      store.set("Profile", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Profile | null {
    return changetype<Profile | null>(store.get_in_block("Profile", id));
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get membershipTier(): string {
    let value = this.get("membershipTier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set membershipTier(value: string) {
    this.set("membershipTier", Value.fromString(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get referralCode(): string {
    let value = this.get("referralCode");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set referralCode(value: string) {
    this.set("referralCode", Value.fromString(value));
  }

  get referredBy(): string | null {
    let value = this.get("referredBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referredBy(value: string | null) {
    if (!value) {
      this.unset("referredBy");
    } else {
      this.set("referredBy", Value.fromString(<string>value));
    }
  }

  get referredProfiles(): Array<string> {
    let value = this.get("referredProfiles");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set referredProfiles(value: Array<string>) {
    this.set("referredProfiles", Value.fromStringArray(value));
  }

  get referredProfileCount(): i32 {
    let value = this.get("referredProfileCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set referredProfileCount(value: i32) {
    this.set("referredProfileCount", Value.fromI32(value));
  }

  get referralBonuses(): Array<string> {
    let value = this.get("referralBonuses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set referralBonuses(value: Array<string>) {
    this.set("referralBonuses", Value.fromStringArray(value));
  }
}

export class ReferralBonus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReferralBonus entity without an ID");
    if (id) {
      assert(id.kind == ValueKind.STRING, `Entities of type ReferralBonus must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
      store.set("ReferralBonus", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ReferralBonus | null {
    return changetype<ReferralBonus | null>(store.get_in_block("ReferralBonus", id));
  }

  static load(id: string): ReferralBonus | null {
    return changetype<ReferralBonus | null>(store.get("ReferralBonus", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get beneficiary(): string {
    let value = this.get("beneficiary");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set beneficiary(value: string) {
    this.set("beneficiary", Value.fromString(value));
  }

  get associatedDeposit(): string {
    let value = this.get("associatedDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set associatedDeposit(value: string) {
    this.set("associatedDeposit", Value.fromString(value));
  }

  get referralLevel(): string {
    let value = this.get("referralLevel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set referralLevel(value: string) {
    this.set("referralLevel", Value.fromString(value));
  }

  get bonusReceivable(): BigDecimal {
    let value = this.get("bonusReceivable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set bonusReceivable(value: BigDecimal) {
    this.set("bonusReceivable", Value.fromBigDecimal(value));
  }

  get annualizedBonusReceivable(): BigDecimal {
    let value = this.get("annualizedBonusReceivable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set annualizedBonusReceivable(value: BigDecimal) {
    this.set("annualizedBonusReceivable", Value.fromBigDecimal(value));
  }

  get bonusClaimed(): BigDecimal {
    let value = this.get("bonusClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set bonusClaimed(value: BigDecimal) {
    this.set("bonusClaimed", Value.fromBigDecimal(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get maturity(): BigInt {
    let value = this.get("maturity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maturity(value: BigInt) {
    this.set("maturity", Value.fromBigInt(value));
  }

  get duration(): string {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set duration(value: string) {
    this.set("duration", Value.fromString(value));
  }

  get lastClaimedAt(): BigInt {
    let value = this.get("lastClaimedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastClaimedAt(value: BigInt) {
    this.set("lastClaimedAt", Value.fromBigInt(value));
  }

  get isFinished(): boolean {
    let value = this.get("isFinished");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isFinished(value: boolean) {
    this.set("isFinished", Value.fromBoolean(value));
  }
}

export class Duration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Duration entity without an ID");
    if (id) {
      assert(id.kind == ValueKind.STRING, `Entities of type Duration must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
      store.set("Duration", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Duration | null {
    return changetype<Duration | null>(store.get_in_block("Duration", id));
  }

  static load(id: string): Duration | null {
    return changetype<Duration | null>(store.get("Duration", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get bonusDepositInterestRate(): BigDecimal {
    let value = this.get("bonusDepositInterestRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set bonusDepositInterestRate(value: BigDecimal) {
    this.set("bonusDepositInterestRate", Value.fromBigDecimal(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }
}

export class ReferralLevel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReferralLevel entity without an ID");
    if (id) {
      assert(id.kind == ValueKind.STRING, `Entities of type ReferralLevel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
      store.set("ReferralLevel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ReferralLevel | null {
    return changetype<ReferralLevel | null>(store.get_in_block("ReferralLevel", id));
  }

  static load(id: string): ReferralLevel | null {
    return changetype<ReferralLevel | null>(store.get("ReferralLevel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get level(): i32 {
    let value = this.get("level");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set level(value: i32) {
    this.set("level", Value.fromI32(value));
  }

  get referralBonusRate(): BigDecimal {
    let value = this.get("referralBonusRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set referralBonusRate(value: BigDecimal) {
    this.set("referralBonusRate", Value.fromBigDecimal(value));
  }
}

export class ProfileReferralLevelData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProfileReferralLevelData entity without an ID");
    if (id) {
      assert(id.kind == ValueKind.STRING, `Entities of type ProfileReferralLevelData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
      store.set("ProfileReferralLevelData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProfileReferralLevelData | null {
    return changetype<ProfileReferralLevelData | null>(store.get_in_block("ProfileReferralLevelData", id));
  }

  static load(id: string): ProfileReferralLevelData | null {
    return changetype<ProfileReferralLevelData | null>(store.get("ProfileReferralLevelData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profile(): string {
    let value = this.get("profile");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set profile(value: string) {
    this.set("profile", Value.fromString(value));
  }

  get referralLevel(): string {
    let value = this.get("referralLevel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set referralLevel(value: string) {
    this.set("referralLevel", Value.fromString(value));
  }

  get totalReferredPrincipals(): BigDecimal {
    let value = this.get("totalReferredPrincipals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalReferredPrincipals(value: BigDecimal) {
    this.set("totalReferredPrincipals", Value.fromBigDecimal(value));
  }

  get referralBonuses(): Array<string> {
    let value = this.get("referralBonuses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set referralBonuses(value: Array<string>) {
    this.set("referralBonuses", Value.fromStringArray(value));
  }
}
